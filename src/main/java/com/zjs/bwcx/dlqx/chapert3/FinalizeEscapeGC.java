package com.zjs.bwcx.dlqx.chapert3;

/**
 * 此代码演示了两点： 1.对象可以在被GC时自我拯救 2.这种拯救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次
 * 
 * @author zjs
 */
public class FinalizeEscapeGC {

	public static FinalizeEscapeGC SAVE_HOOK = null;

	public void isAlive() {
		System.out.println("yes, i am still alive :)");
	}

	@Override
	protected void finalize() throws Throwable {
		super.finalize();
		System.out.println("finalize method executed!");
		FinalizeEscapeGC.SAVE_HOOK = this;
	}

	public static void main(String[] args) throws InterruptedException {
		SAVE_HOOK = new FinalizeEscapeGC();

		// 对象第一次成功拯救自己
		SAVE_HOOK = null;
		System.gc();
		// 应为finalize方法优先级很低，多以暂停0.5秒以等待他
		Thread.sleep(500);
		if (SAVE_HOOK != null) {
			SAVE_HOOK.isAlive();
		} else {
			System.out.println("no,i am dead :(");
		}

		// 下面这段代码和上面的完全相同，但是这次却自救失败了
		SAVE_HOOK = null;
		System.gc();
		// 应为finalize方法优先级很低，多以暂停0.5秒以等待他
		Thread.sleep(500);
		if (SAVE_HOOK != null) {
			SAVE_HOOK.isAlive();
		} else {
			System.out.println("no,i am dead :(");
		}
	}
}
